class Solution:
    def letterCombinations(self, digits: str):
        # Mapping of digits to corresponding letters
        phone_map = {
            "2": "abc", "3": "def", "4": "ghi", "5": "jkl",
            "6": "mno", "7": "pqrs", "8": "tuv", "9": "wxyz"
        }

        # If input is empty, return an empty list
        if not digits:
            return []

        result = []

        # Backtracking helper function
        def backtrack(index, current):
            # If the current string is complete, add it to results
            if index == len(digits):
                result.append(current)
                return

            # Get the letters for the current digit
            letters = phone_map[digits[index]]
            for letter in letters:
                backtrack(index + 1, current + letter)

        # Start backtracking from index 0 and an empty string
        backtrack(0, "")
        return result
